{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","components/Search/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","className","href","Jumbotron","children","Search","for","class","type","id","placeholder","App","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qTAaiBA,MAVjB,WACI,OACI,yBAAKC,UAAU,2BACf,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,kBCKOC,MATf,YACI,OAD6B,EAAZC,SAEb,yBAAKH,UAAU,aACf,wBAAIA,UAAU,aAAd,+BACA,uBAAGA,UAAU,QAAb,2C,MCOWI,MAXlB,WACG,OACA,yBACIJ,UAAU,2BACV,2BAAOK,IAAI,eAAeC,MAAM,WAAhC,UACJ,2BAAOC,KAAK,OAAOD,MAAM,eAAeE,GAAG,eAAeC,YAAY,WAC9D,2BAAOF,KAAK,OAAQP,UAAU,yBAAyBQ,GAAG,kBACtD,4BAAQD,KAAK,SAASD,MAAM,uBAAuBE,GAAG,aAAtD,YCUDE,E,iLAXX,OACE,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANaC,IAAMC,WCInBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,GAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAzDAoB,CAAwBjC,GAHxBD,EAAgBC,MC7BxBkC,K","file":"static/js/main.72fab644.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Google Books\n        </a>\n      </nav>\n    );\n  }\n  \n  export default Navbar;\n    \n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n    return (\n        <div className=\"jumbotron\">\n        <h1 className=\"display-4\">(React) Google Books Search</h1>\n        <p className=\"lead\">Search for and Save Books of interest</p>\n      </div>\n\n    )\n}\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n function Search() {\n    return (\n    <div \n        className=\"form-group mx-sm-3 mb-2\">\n        <label for=\"inputSearch2\" class=\"sr-only\">Search</label>\n    <input type=\"text\" class=\"form-control\" id=\"inputSearch2\" placeholder=\"Search\" />\n            <input type=\"text\"  className=\"form-control-plaintext\" id=\"staticSearch2\"/>\n                <button type=\"search\" class=\"btn btn-primary mb-2\" id=\"searchBtn\">Search</button>\n        </div>\n            );\n            }\n    export default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Search from \"./components/Search\"\n\nclass  App extends React.Component {\n  render () {\n    return(\n      <div>\n      <Navbar />\n      <Jumbotron></Jumbotron>\n      <Search></Search>\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}